// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-math-async-response.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message MathProblem
 */
export interface MathProblem {
    /**
     * @generated from protobuf field: uint32 a = 1;
     */
    a: number;
    /**
     * @generated from protobuf field: uint32 b = 2;
     */
    b: number;
    /**
     * @generated from protobuf field: MathOperation op = 3;
     */
    op: MathOperation;
}
/**
 * @generated from protobuf message MathResult_Add
 */
export interface MathResult_Add {
    /**
     * @generated from protobuf field: uint32 result = 1;
     */
    result: number;
}
/**
 * @generated from protobuf message MathResult_Subtract
 */
export interface MathResult_Subtract {
    /**
     * @generated from protobuf field: uint32 result = 1;
     */
    result: number;
}
/**
 * @generated from protobuf message MathResult_AddAndSubtract
 */
export interface MathResult_AddAndSubtract {
    /**
     * @generated from protobuf field: uint32 addResult = 1;
     */
    addResult: number;
    /**
     * @generated from protobuf field: uint32 subtractResult = 2;
     */
    subtractResult: number;
}
/**
 * @generated from protobuf message MathProblemResponse
 */
export interface MathProblemResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "addResult";
        /**
         * @generated from protobuf field: MathResult_Add addResult = 1;
         */
        addResult: MathResult_Add;
    } | {
        oneofKind: "subtractResult";
        /**
         * @generated from protobuf field: MathResult_Subtract subtractResult = 2;
         */
        subtractResult: MathResult_Subtract;
    } | {
        oneofKind: "addAndSubtractResult";
        /**
         * @generated from protobuf field: MathResult_AddAndSubtract addAndSubtractResult = 3;
         */
        addAndSubtractResult: MathResult_AddAndSubtract;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum MathOperation
 */
export enum MathOperation {
    /**
     * @generated from protobuf enum value: MathOp_NotSet = 0;
     */
    MathOp_NotSet = 0,
    /**
     * @generated from protobuf enum value: MathOp_Add = 1;
     */
    MathOp_Add = 1,
    /**
     * @generated from protobuf enum value: MathOp_Subtract = 2;
     */
    MathOp_Subtract = 2,
    /**
     * @generated from protobuf enum value: MathOp_Add_And_Subtract = 3;
     */
    MathOp_Add_And_Subtract = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class MathProblem$Type extends MessageType<MathProblem> {
    constructor() {
        super("MathProblem", [
            { no: 1, name: "a", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "b", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "op", kind: "enum", T: () => ["MathOperation", MathOperation] }
        ]);
    }
    create(value?: PartialMessage<MathProblem>): MathProblem {
        const message = { a: 0, b: 0, op: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MathProblem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathProblem): MathProblem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 a */ 1:
                    message.a = reader.uint32();
                    break;
                case /* uint32 b */ 2:
                    message.b = reader.uint32();
                    break;
                case /* MathOperation op */ 3:
                    message.op = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathProblem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 a = 1; */
        if (message.a !== 0)
            writer.tag(1, WireType.Varint).uint32(message.a);
        /* uint32 b = 2; */
        if (message.b !== 0)
            writer.tag(2, WireType.Varint).uint32(message.b);
        /* MathOperation op = 3; */
        if (message.op !== 0)
            writer.tag(3, WireType.Varint).int32(message.op);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathProblem
 */
export const MathProblem = new MathProblem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResult_Add$Type extends MessageType<MathResult_Add> {
    constructor() {
        super("MathResult_Add", [
            { no: 1, name: "result", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MathResult_Add>): MathResult_Add {
        const message = { result: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MathResult_Add>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResult_Add): MathResult_Add {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 result */ 1:
                    message.result = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResult_Add, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).uint32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResult_Add
 */
export const MathResult_Add = new MathResult_Add$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResult_Subtract$Type extends MessageType<MathResult_Subtract> {
    constructor() {
        super("MathResult_Subtract", [
            { no: 1, name: "result", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MathResult_Subtract>): MathResult_Subtract {
        const message = { result: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MathResult_Subtract>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResult_Subtract): MathResult_Subtract {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 result */ 1:
                    message.result = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResult_Subtract, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).uint32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResult_Subtract
 */
export const MathResult_Subtract = new MathResult_Subtract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResult_AddAndSubtract$Type extends MessageType<MathResult_AddAndSubtract> {
    constructor() {
        super("MathResult_AddAndSubtract", [
            { no: 1, name: "addResult", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "subtractResult", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MathResult_AddAndSubtract>): MathResult_AddAndSubtract {
        const message = { addResult: 0, subtractResult: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MathResult_AddAndSubtract>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResult_AddAndSubtract): MathResult_AddAndSubtract {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 addResult */ 1:
                    message.addResult = reader.uint32();
                    break;
                case /* uint32 subtractResult */ 2:
                    message.subtractResult = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResult_AddAndSubtract, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 addResult = 1; */
        if (message.addResult !== 0)
            writer.tag(1, WireType.Varint).uint32(message.addResult);
        /* uint32 subtractResult = 2; */
        if (message.subtractResult !== 0)
            writer.tag(2, WireType.Varint).uint32(message.subtractResult);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResult_AddAndSubtract
 */
export const MathResult_AddAndSubtract = new MathResult_AddAndSubtract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathProblemResponse$Type extends MessageType<MathProblemResponse> {
    constructor() {
        super("MathProblemResponse", [
            { no: 1, name: "addResult", kind: "message", oneof: "response", T: () => MathResult_Add },
            { no: 2, name: "subtractResult", kind: "message", oneof: "response", T: () => MathResult_Subtract },
            { no: 3, name: "addAndSubtractResult", kind: "message", oneof: "response", T: () => MathResult_AddAndSubtract }
        ]);
    }
    create(value?: PartialMessage<MathProblemResponse>): MathProblemResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MathProblemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathProblemResponse): MathProblemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MathResult_Add addResult */ 1:
                    message.response = {
                        oneofKind: "addResult",
                        addResult: MathResult_Add.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).addResult)
                    };
                    break;
                case /* MathResult_Subtract subtractResult */ 2:
                    message.response = {
                        oneofKind: "subtractResult",
                        subtractResult: MathResult_Subtract.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).subtractResult)
                    };
                    break;
                case /* MathResult_AddAndSubtract addAndSubtractResult */ 3:
                    message.response = {
                        oneofKind: "addAndSubtractResult",
                        addAndSubtractResult: MathResult_AddAndSubtract.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).addAndSubtractResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathProblemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MathResult_Add addResult = 1; */
        if (message.response.oneofKind === "addResult")
            MathResult_Add.internalBinaryWrite(message.response.addResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MathResult_Subtract subtractResult = 2; */
        if (message.response.oneofKind === "subtractResult")
            MathResult_Subtract.internalBinaryWrite(message.response.subtractResult, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MathResult_AddAndSubtract addAndSubtractResult = 3; */
        if (message.response.oneofKind === "addAndSubtractResult")
            MathResult_AddAndSubtract.internalBinaryWrite(message.response.addAndSubtractResult, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathProblemResponse
 */
export const MathProblemResponse = new MathProblemResponse$Type();
